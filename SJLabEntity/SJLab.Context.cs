//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SJLabEntity
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SjLabsEntities : DbContext
    {
        public SjLabsEntities()
            : base("name=SjLabsEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Ac_GroupMaster> Ac_GroupMaster { get; set; }
        public virtual DbSet<Ac_LedgerMaster> Ac_LedgerMaster { get; set; }
        public virtual DbSet<Ac_TrnVoucher> Ac_TrnVoucher { get; set; }
        public virtual DbSet<Ac_VoucherType> Ac_VoucherType { get; set; }
        public virtual DbSet<M_BankMaster> M_BankMaster { get; set; }
        public virtual DbSet<M_BillTypeMaster> M_BillTypeMaster { get; set; }
        public virtual DbSet<M_BloodGroupMaster> M_BloodGroupMaster { get; set; }
        public virtual DbSet<M_CityStateMaster> M_CityStateMaster { get; set; }
        public virtual DbSet<M_CompanyMaster> M_CompanyMaster { get; set; }
        public virtual DbSet<M_ComplaintMaster> M_ComplaintMaster { get; set; }
        public virtual DbSet<M_ComplaintTypeMaster> M_ComplaintTypeMaster { get; set; }
        public virtual DbSet<M_CountryMaster> M_CountryMaster { get; set; }
        public virtual DbSet<M_DispatchMaster> M_DispatchMaster { get; set; }
        public virtual DbSet<M_DispatchTypeMaster> M_DispatchTypeMaster { get; set; }
        public virtual DbSet<M_DistrictMaster> M_DistrictMaster { get; set; }
        public virtual DbSet<M_FranchiseMaster> M_FranchiseMaster { get; set; }
        public virtual DbSet<M_ImageTypeMaster> M_ImageTypeMaster { get; set; }
        public virtual DbSet<M_JoinStatus> M_JoinStatus { get; set; }
        public virtual DbSet<M_KitProductMaster> M_KitProductMaster { get; set; }
        public virtual DbSet<M_LegMaster> M_LegMaster { get; set; }
        public virtual DbSet<M_MeetingMaster> M_MeetingMaster { get; set; }
        public virtual DbSet<M_MemberMaster> M_MemberMaster { get; set; }
        public virtual DbSet<M_MemFormDetail> M_MemFormDetail { get; set; }
        public virtual DbSet<M_MemTreeFlag> M_MemTreeFlag { get; set; }
        public virtual DbSet<M_NewsSeminarMaster> M_NewsSeminarMaster { get; set; }
        public virtual DbSet<M_NewsTypeMaster> M_NewsTypeMaster { get; set; }
        public virtual DbSet<M_OccupationMaster> M_OccupationMaster { get; set; }
        public virtual DbSet<M_PayModeMaster> M_PayModeMaster { get; set; }
        public virtual DbSet<M_PayoutTypeMaster> M_PayoutTypeMaster { get; set; }
        public virtual DbSet<M_PlanMaster> M_PlanMaster { get; set; }
        public virtual DbSet<M_ProfessionMaster> M_ProfessionMaster { get; set; }
        public virtual DbSet<M_RelationMaster> M_RelationMaster { get; set; }
        public virtual DbSet<M_SearchTypeMaster> M_SearchTypeMaster { get; set; }
        public virtual DbSet<M_SolutionMaster> M_SolutionMaster { get; set; }
        public virtual DbSet<M_StateDivMaster> M_StateDivMaster { get; set; }
        public virtual DbSet<M_ThemeMaster> M_ThemeMaster { get; set; }
        public virtual DbSet<M_UserGroupMaster> M_UserGroupMaster { get; set; }
        public virtual DbSet<M_UserMaster> M_UserMaster { get; set; }
        public virtual DbSet<M_UserPermissionMaster> M_UserPermissionMaster { get; set; }
        public virtual DbSet<ProductGallery> ProductGalleries { get; set; }
        public virtual DbSet<Temp_TrnVoucher> Temp_TrnVoucher { get; set; }
        public virtual DbSet<TrnBillDetail> TrnBillDetails { get; set; }
        public virtual DbSet<TrnBillMain> TrnBillMains { get; set; }
        public virtual DbSet<TrnFormGeneration> TrnFormGenerations { get; set; }
        public virtual DbSet<TrnProduct> TrnProducts { get; set; }
        public virtual DbSet<TrnTransferPinDetail> TrnTransferPinDetails { get; set; }
        public virtual DbSet<TrnUpdateBillDetail> TrnUpdateBillDetails { get; set; }
        public virtual DbSet<TrnUpgrade> TrnUpgrades { get; set; }
        public virtual DbSet<AdminLogin> AdminLogins { get; set; }
        public virtual DbSet<AdminMobile> AdminMobiles { get; set; }
        public virtual DbSet<BankBranch> BankBranches { get; set; }
        public virtual DbSet<BinaryFundDetail> BinaryFundDetails { get; set; }
        public virtual DbSet<D_MonthlyPayDetail> D_MonthlyPayDetail { get; set; }
        public virtual DbSet<D_SessnMaster> D_SessnMaster { get; set; }
        public virtual DbSet<D_SessWiseBv> D_SessWiseBv { get; set; }
        public virtual DbSet<D_SesswiseBvCF> D_SesswiseBvCF { get; set; }
        public virtual DbSet<Fundwithdrawl> Fundwithdrawls { get; set; }
        public virtual DbSet<G_MstInsurance> G_MstInsurance { get; set; }
        public virtual DbSet<G_SessnMaster> G_SessnMaster { get; set; }
        public virtual DbSet<LegShiftBak> LegShiftBaks { get; set; }
        public virtual DbSet<M_AcitiveDeActive> M_AcitiveDeActive { get; set; }
        public virtual DbSet<M_ActiveDeActivePinStatus> M_ActiveDeActivePinStatus { get; set; }
        public virtual DbSet<M_ActiveDeActiveReason> M_ActiveDeActiveReason { get; set; }
        public virtual DbSet<M_AppUser> M_AppUser { get; set; }
        public virtual DbSet<M_Award> M_Award { get; set; }
        public virtual DbSet<M_AwardFinal> M_AwardFinal { get; set; }
        public virtual DbSet<M_AwardMaster> M_AwardMaster { get; set; }
        public virtual DbSet<M_BonanzaMaster> M_BonanzaMaster { get; set; }
        public virtual DbSet<m_ConfigMaster> m_ConfigMaster { get; set; }
        public virtual DbSet<M_DeliveryCenter> M_DeliveryCenter { get; set; }
        public virtual DbSet<M_DirectPool> M_DirectPool { get; set; }
        public virtual DbSet<M_FormGeneration> M_FormGeneration { get; set; }
        public virtual DbSet<M_GrowthTreeRelation> M_GrowthTreeRelation { get; set; }
        public virtual DbSet<M_IFSCMaster> M_IFSCMaster { get; set; }
        public virtual DbSet<M_KitMaster> M_KitMaster { get; set; }
        public virtual DbSet<M_KitProductDetail> M_KitProductDetail { get; set; }
        public virtual DbSet<M_LifeTimeReward> M_LifeTimeReward { get; set; }
        public virtual DbSet<M_MaxDiscount> M_MaxDiscount { get; set; }
        public virtual DbSet<M_MemTreeRelation> M_MemTreeRelation { get; set; }
        public virtual DbSet<M_MonthlyPayDetail> M_MonthlyPayDetail { get; set; }
        public virtual DbSet<M_MonthSessnMaster> M_MonthSessnMaster { get; set; }
        public virtual DbSet<M_MonthWiseAward> M_MonthWiseAward { get; set; }
        public virtual DbSet<M_MonthWiseReward> M_MonthWiseReward { get; set; }
        public virtual DbSet<M_PlanIncomeTypeMaster> M_PlanIncomeTypeMaster { get; set; }
        public virtual DbSet<m_ProductMaster> m_ProductMaster { get; set; }
        public virtual DbSet<M_Reward> M_Reward { get; set; }
        public virtual DbSet<M_RewardFinal> M_RewardFinal { get; set; }
        public virtual DbSet<M_RewardMaster> M_RewardMaster { get; set; }
        public virtual DbSet<M_RoyaltySlab> M_RoyaltySlab { get; set; }
        public virtual DbSet<M_SearchMethodMaster> M_SearchMethodMaster { get; set; }
        public virtual DbSet<M_SendSMSDetails> M_SendSMSDetails { get; set; }
        public virtual DbSet<M_SessnMaster> M_SessnMaster { get; set; }
        public virtual DbSet<M_SessWiseBv> M_SessWiseBv { get; set; }
        public virtual DbSet<M_SessWiseBvCF> M_SessWiseBvCF { get; set; }
        public virtual DbSet<M_SmsMaster> M_SmsMaster { get; set; }
        public virtual DbSet<M_VersionInfo> M_VersionInfo { get; set; }
        public virtual DbSet<M_WebMenuMaster> M_WebMenuMaster { get; set; }
        public virtual DbSet<M_WebUser> M_WebUser { get; set; }
        public virtual DbSet<MemberLogin> MemberLogins { get; set; }
        public virtual DbSet<MstBatchAttendance> MstBatchAttendances { get; set; }
        public virtual DbSet<MstBatchMaster> MstBatchMasters { get; set; }
        public virtual DbSet<MstBatchRegister> MstBatchRegisters { get; set; }
        public virtual DbSet<MstLevelSlab> MstLevelSlabs { get; set; }
        public virtual DbSet<MstRankAchiever> MstRankAchievers { get; set; }
        public virtual DbSet<MstRank> MstRanks { get; set; }
        public virtual DbSet<MstRankUpdate> MstRankUpdates { get; set; }
        public virtual DbSet<PostTopUp_MemDtl> PostTopUp_MemDtl { get; set; }
        public virtual DbSet<PreTopUp_MemDtl> PreTopUp_MemDtl { get; set; }
        public virtual DbSet<R_MemTreeRelation> R_MemTreeRelation { get; set; }
        public virtual DbSet<RepurchIncome> RepurchIncomes { get; set; }
        public virtual DbSet<ReqType> ReqTypes { get; set; }
        public virtual DbSet<ScratchNo> ScratchNoes { get; set; }
        public virtual DbSet<TempBatchMaster> TempBatchMasters { get; set; }
        public virtual DbSet<TempBatchRegister> TempBatchRegisters { get; set; }
        public virtual DbSet<TempDispatchMaster> TempDispatchMasters { get; set; }
        public virtual DbSet<TempFranchiseMAster> TempFranchiseMAsters { get; set; }
        public virtual DbSet<TempImageTypeMaster> TempImageTypeMasters { get; set; }
        public virtual DbSet<TempKitMaster> TempKitMasters { get; set; }
        public virtual DbSet<TempKitProductMaster> TempKitProductMasters { get; set; }
        public virtual DbSet<TempLegShift> TempLegShifts { get; set; }
        public virtual DbSet<TempMemberMaster> TempMemberMasters { get; set; }
        public virtual DbSet<TempOrder> TempOrders { get; set; }
        public virtual DbSet<TempOrderDetail> TempOrderDetails { get; set; }
        public virtual DbSet<TempProductGallery> TempProductGalleries { get; set; }
        public virtual DbSet<TempTrnVoucher> TempTrnVouchers { get; set; }
        public virtual DbSet<TempVersionInfo> TempVersionInfoes { get; set; }
        public virtual DbSet<TempWithdrawl> TempWithdrawls { get; set; }
        public virtual DbSet<TrnBlockedUnBlockedIDDetail> TrnBlockedUnBlockedIDDetails { get; set; }
        public virtual DbSet<TrnCancelTopUpDetail> TrnCancelTopUpDetails { get; set; }
        public virtual DbSet<TrnKitProduct> TrnKitProducts { get; set; }
        public virtual DbSet<TrnLedger> TrnLedgers { get; set; }
        public virtual DbSet<TrnOrder> TrnOrders { get; set; }
        public virtual DbSet<TrnOrder22Apr17> TrnOrder22Apr17 { get; set; }
        public virtual DbSet<TrnOrderDetail> TrnOrderDetails { get; set; }
        public virtual DbSet<TrnOrderDetail22Apr17> TrnOrderDetail22Apr17 { get; set; }
        public virtual DbSet<TrnPinDispatch> TrnPinDispatches { get; set; }
        public virtual DbSet<TrnPinReqMain> TrnPinReqMains { get; set; }
        public virtual DbSet<TrnPinRequest> TrnPinRequests { get; set; }
        public virtual DbSet<TrnVoucher> TrnVouchers { get; set; }
        public virtual DbSet<UserHistory> UserHistories { get; set; }
        public virtual DbSet<WalletReq> WalletReqs { get; set; }
        public virtual DbSet<V_AcFund> V_AcFund { get; set; }
        public virtual DbSet<V_Achiever> V_Achiever { get; set; }
        public virtual DbSet<V_ActiveDeActive> V_ActiveDeActive { get; set; }
        public virtual DbSet<v_Activerefdownline> v_Activerefdownline { get; set; }
        public virtual DbSet<V_BatchMaster> V_BatchMaster { get; set; }
        public virtual DbSet<V_BatchRegister> V_BatchRegister { get; set; }
        public virtual DbSet<V_Bonanza> V_Bonanza { get; set; }
        public virtual DbSet<V_BonanzaRP> V_BonanzaRP { get; set; }
        public virtual DbSet<V_BvInfo> V_BvInfo { get; set; }
        public virtual DbSet<V_CardDetail> V_CardDetail { get; set; }
        public virtual DbSet<V_CheckSposRoyalty> V_CheckSposRoyalty { get; set; }
        public virtual DbSet<V_City> V_City { get; set; }
        public virtual DbSet<V_CustomerOrderDetail> V_CustomerOrderDetail { get; set; }
        public virtual DbSet<V_DailyInfo> V_DailyInfo { get; set; }
        public virtual DbSet<V_DailyPayoutDetail> V_DailyPayoutDetail { get; set; }
        public virtual DbSet<V_DateWiseIncomingFund> V_DateWiseIncomingFund { get; set; }
        public virtual DbSet<v_DI> v_DI { get; set; }
        public virtual DbSet<V_DisplayReward> V_DisplayReward { get; set; }
        public virtual DbSet<V_District> V_District { get; set; }
        public virtual DbSet<V_Downline> V_Downline { get; set; }
        public virtual DbSet<V_DownLineDetail> V_DownLineDetail { get; set; }
        public virtual DbSet<V_DownlineInfo> V_DownlineInfo { get; set; }
        public virtual DbSet<V_EpinStatus> V_EpinStatus { get; set; }
        public virtual DbSet<V_IDSummary> V_IDSummary { get; set; }
        public virtual DbSet<V_IDWiseBillSummary> V_IDWiseBillSummary { get; set; }
        public virtual DbSet<V_IncomingFund> V_IncomingFund { get; set; }
        public virtual DbSet<V_JoinColor> V_JoinColor { get; set; }
        public virtual DbSet<V_LedgerBalance> V_LedgerBalance { get; set; }
        public virtual DbSet<V_LuckyDraw> V_LuckyDraw { get; set; }
        public virtual DbSet<V_MemberActiveDeActive> V_MemberActiveDeActive { get; set; }
        public virtual DbSet<V_MemberDetail> V_MemberDetail { get; set; }
        public virtual DbSet<V_MemberDetail_New> V_MemberDetail_New { get; set; }
        public virtual DbSet<V_MemberInfo> V_MemberInfo { get; set; }
        public virtual DbSet<V_MemberProfile> V_MemberProfile { get; set; }
        public virtual DbSet<V_MemBV> V_MemBV { get; set; }
        public virtual DbSet<V_Mobile> V_Mobile { get; set; }
        public virtual DbSet<V_MonthlyLedgerBalance> V_MonthlyLedgerBalance { get; set; }
        public virtual DbSet<V_MonthPayoutDetail> V_MonthPayoutDetail { get; set; }
        public virtual DbSet<V_News> V_News { get; set; }
        public virtual DbSet<V_Payout> V_Payout { get; set; }
        public virtual DbSet<V_PayoutDetail> V_PayoutDetail { get; set; }
        public virtual DbSet<V_PaySummary> V_PaySummary { get; set; }
        public virtual DbSet<V_PinActiveDeActiveReasonReport> V_PinActiveDeActiveReasonReport { get; set; }
        public virtual DbSet<V_PinRequestDetail> V_PinRequestDetail { get; set; }
        public virtual DbSet<V_PinStatus> V_PinStatus { get; set; }
        public virtual DbSet<V_PinStatusNew> V_PinStatusNew { get; set; }
        public virtual DbSet<V_PvInfo> V_PvInfo { get; set; }
        public virtual DbSet<V_Qualifier> V_Qualifier { get; set; }
        public virtual DbSet<v_refdownline> v_refdownline { get; set; }
        public virtual DbSet<V_ReferralInfo> V_ReferralInfo { get; set; }
        public virtual DbSet<V_Reward> V_Reward { get; set; }
        public virtual DbSet<V_RewardDetail> V_RewardDetail { get; set; }
        public virtual DbSet<V_RewardLifeTime> V_RewardLifeTime { get; set; }
        public virtual DbSet<V_RpInfo> V_RpInfo { get; set; }
        public virtual DbSet<V_RptMainFund> V_RptMainFund { get; set; }
        public virtual DbSet<V_RptServiceFund> V_RptServiceFund { get; set; }
        public virtual DbSet<V_SessionWiseFundMIS> V_SessionWiseFundMIS { get; set; }
        public virtual DbSet<V_SessionWiseIncomingFund> V_SessionWiseIncomingFund { get; set; }
        public virtual DbSet<V_SessionWiseOutGoingFund> V_SessionWiseOutGoingFund { get; set; }
        public virtual DbSet<V_SessWiseDownlineInfo> V_SessWiseDownlineInfo { get; set; }
        public virtual DbSet<V_SpInfo> V_SpInfo { get; set; }
        public virtual DbSet<V_TDSDetail> V_TDSDetail { get; set; }
        public virtual DbSet<V_TeamBuildingId> V_TeamBuildingId { get; set; }
        public virtual DbSet<V_TopupDetail> V_TopupDetail { get; set; }
        public virtual DbSet<V_TopUpReport> V_TopUpReport { get; set; }
        public virtual DbSet<V_TotalJoining> V_TotalJoining { get; set; }
        public virtual DbSet<V_TotalJoiningActive> V_TotalJoiningActive { get; set; }
        public virtual DbSet<V_TransferredPinDetail> V_TransferredPinDetail { get; set; }
        public virtual DbSet<V_TriangularIDs> V_TriangularIDs { get; set; }
        public virtual DbSet<V_User> V_User { get; set; }
    
        [DbFunction("SjLabsEntities", "MyTeamData")]
        public virtual IQueryable<MyTeamData_Result> MyTeamData(Nullable<int> formNo)
        {
            var formNoParameter = formNo.HasValue ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<MyTeamData_Result>("[SjLabsEntities].[MyTeamData](@FormNo)", formNoParameter);
        }
    
        [DbFunction("SjLabsEntities", "Sample")]
        public virtual IQueryable<Sample_Result> Sample(Nullable<int> sampleValue)
        {
            var sampleValueParameter = sampleValue.HasValue ?
                new ObjectParameter("SampleValue", sampleValue) :
                new ObjectParameter("SampleValue", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Sample_Result>("[SjLabsEntities].[Sample](@SampleValue)", sampleValueParameter);
        }
    
        [DbFunction("SjLabsEntities", "SplitString")]
        public virtual IQueryable<SplitString_Result> SplitString(string input, string character)
        {
            var inputParameter = input != null ?
                new ObjectParameter("Input", input) :
                new ObjectParameter("Input", typeof(string));
    
            var characterParameter = character != null ?
                new ObjectParameter("Character", character) :
                new ObjectParameter("Character", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SplitString_Result>("[SjLabsEntities].[SplitString](@Input, @Character)", inputParameter, characterParameter);
        }
    
        [DbFunction("SjLabsEntities", "ufnGetBalance")]
        public virtual IQueryable<ufnGetBalance_Result> ufnGetBalance(string formNo, string acType)
        {
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            var acTypeParameter = acType != null ?
                new ObjectParameter("AcType", acType) :
                new ObjectParameter("AcType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ufnGetBalance_Result>("[SjLabsEntities].[ufnGetBalance](@FormNo, @AcType)", formNoParameter, acTypeParameter);
        }
    
        public virtual int AutoRewardEntry()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AutoRewardEntry");
        }
    
        public virtual int AutoWithDrawal(Nullable<decimal> sessID)
        {
            var sessIDParameter = sessID.HasValue ?
                new ObjectParameter("SessID", sessID) :
                new ObjectParameter("SessID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AutoWithDrawal", sessIDParameter);
        }
    
        public virtual int AwardInc(Nullable<decimal> sessID)
        {
            var sessIDParameter = sessID.HasValue ?
                new ObjectParameter("SessID", sessID) :
                new ObjectParameter("SessID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AwardInc", sessIDParameter);
        }
    
        public virtual int BillDetails(string billNo, Nullable<decimal> sBillNo, Nullable<System.DateTime> billDate, Nullable<decimal> supplierId, string soldBy, string ftype, string fCode, Nullable<decimal> formNo, string productId, string productName, string batchNo, Nullable<decimal> qty, Nullable<decimal> rate, Nullable<decimal> bv, Nullable<decimal> bvValue, string isKitBv, string taxType, Nullable<decimal> tax, Nullable<decimal> taxAmount, Nullable<decimal> discount, Nullable<decimal> netAmount, string series, string remarks, string billFor, Nullable<decimal> rP, Nullable<decimal> rPValue)
        {
            var billNoParameter = billNo != null ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(string));
    
            var sBillNoParameter = sBillNo.HasValue ?
                new ObjectParameter("SBillNo", sBillNo) :
                new ObjectParameter("SBillNo", typeof(decimal));
    
            var billDateParameter = billDate.HasValue ?
                new ObjectParameter("BillDate", billDate) :
                new ObjectParameter("BillDate", typeof(System.DateTime));
    
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(decimal));
    
            var soldByParameter = soldBy != null ?
                new ObjectParameter("SoldBy", soldBy) :
                new ObjectParameter("SoldBy", typeof(string));
    
            var ftypeParameter = ftype != null ?
                new ObjectParameter("Ftype", ftype) :
                new ObjectParameter("Ftype", typeof(string));
    
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var formNoParameter = formNo.HasValue ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(decimal));
    
            var productIdParameter = productId != null ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(string));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var batchNoParameter = batchNo != null ?
                new ObjectParameter("BatchNo", batchNo) :
                new ObjectParameter("BatchNo", typeof(string));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var bvParameter = bv.HasValue ?
                new ObjectParameter("Bv", bv) :
                new ObjectParameter("Bv", typeof(decimal));
    
            var bvValueParameter = bvValue.HasValue ?
                new ObjectParameter("BvValue", bvValue) :
                new ObjectParameter("BvValue", typeof(decimal));
    
            var isKitBvParameter = isKitBv != null ?
                new ObjectParameter("IsKitBv", isKitBv) :
                new ObjectParameter("IsKitBv", typeof(string));
    
            var taxTypeParameter = taxType != null ?
                new ObjectParameter("TaxType", taxType) :
                new ObjectParameter("TaxType", typeof(string));
    
            var taxParameter = tax.HasValue ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(decimal));
    
            var taxAmountParameter = taxAmount.HasValue ?
                new ObjectParameter("TaxAmount", taxAmount) :
                new ObjectParameter("TaxAmount", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var seriesParameter = series != null ?
                new ObjectParameter("Series", series) :
                new ObjectParameter("Series", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var billForParameter = billFor != null ?
                new ObjectParameter("BillFor", billFor) :
                new ObjectParameter("BillFor", typeof(string));
    
            var rPParameter = rP.HasValue ?
                new ObjectParameter("RP", rP) :
                new ObjectParameter("RP", typeof(decimal));
    
            var rPValueParameter = rPValue.HasValue ?
                new ObjectParameter("RPValue", rPValue) :
                new ObjectParameter("RPValue", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BillDetails", billNoParameter, sBillNoParameter, billDateParameter, supplierIdParameter, soldByParameter, ftypeParameter, fCodeParameter, formNoParameter, productIdParameter, productNameParameter, batchNoParameter, qtyParameter, rateParameter, bvParameter, bvValueParameter, isKitBvParameter, taxTypeParameter, taxParameter, taxAmountParameter, discountParameter, netAmountParameter, seriesParameter, remarksParameter, billForParameter, rPParameter, rPValueParameter);
        }
    
        public virtual int BillMain(string billNo, Nullable<decimal> sBillNo, Nullable<System.DateTime> billDate, string cType, string soldBy, string billBy, string fType, string fCode, string partyName, Nullable<decimal> supplierId, Nullable<decimal> chddNo, Nullable<System.DateTime> chDate, Nullable<decimal> chAmt, string bankName, Nullable<decimal> formNo, Nullable<decimal> taxAmount, Nullable<decimal> sTaxAmount, Nullable<decimal> discount, Nullable<decimal> kitBvValue, Nullable<decimal> bvValue, Nullable<decimal> rpValue, Nullable<decimal> netPayable, Nullable<decimal> amount, Nullable<decimal> rndOff, Nullable<decimal> cardAmount, string payMode, Nullable<decimal> sessId, string bvTransfer, string remarks, string activeStatus, string dispatchStatus, string lR, Nullable<System.DateTime> lrDate, string transporterName, string dispatchTo, string freightType, Nullable<decimal> freightAmt, string series, string scratch, Nullable<decimal> refId, string refName, string jType, Nullable<decimal> unit, string billTo, Nullable<decimal> pSessId, string billFor, string dcNo, string imported, string isReceive, string isCredit, string billType, Nullable<decimal> discountAmt)
        {
            var billNoParameter = billNo != null ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(string));
    
            var sBillNoParameter = sBillNo.HasValue ?
                new ObjectParameter("SBillNo", sBillNo) :
                new ObjectParameter("SBillNo", typeof(decimal));
    
            var billDateParameter = billDate.HasValue ?
                new ObjectParameter("BillDate", billDate) :
                new ObjectParameter("BillDate", typeof(System.DateTime));
    
            var cTypeParameter = cType != null ?
                new ObjectParameter("CType", cType) :
                new ObjectParameter("CType", typeof(string));
    
            var soldByParameter = soldBy != null ?
                new ObjectParameter("SoldBy", soldBy) :
                new ObjectParameter("SoldBy", typeof(string));
    
            var billByParameter = billBy != null ?
                new ObjectParameter("BillBy", billBy) :
                new ObjectParameter("BillBy", typeof(string));
    
            var fTypeParameter = fType != null ?
                new ObjectParameter("FType", fType) :
                new ObjectParameter("FType", typeof(string));
    
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var partyNameParameter = partyName != null ?
                new ObjectParameter("PartyName", partyName) :
                new ObjectParameter("PartyName", typeof(string));
    
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(decimal));
    
            var chddNoParameter = chddNo.HasValue ?
                new ObjectParameter("ChddNo", chddNo) :
                new ObjectParameter("ChddNo", typeof(decimal));
    
            var chDateParameter = chDate.HasValue ?
                new ObjectParameter("ChDate", chDate) :
                new ObjectParameter("ChDate", typeof(System.DateTime));
    
            var chAmtParameter = chAmt.HasValue ?
                new ObjectParameter("ChAmt", chAmt) :
                new ObjectParameter("ChAmt", typeof(decimal));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var formNoParameter = formNo.HasValue ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(decimal));
    
            var taxAmountParameter = taxAmount.HasValue ?
                new ObjectParameter("TaxAmount", taxAmount) :
                new ObjectParameter("TaxAmount", typeof(decimal));
    
            var sTaxAmountParameter = sTaxAmount.HasValue ?
                new ObjectParameter("STaxAmount", sTaxAmount) :
                new ObjectParameter("STaxAmount", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var kitBvValueParameter = kitBvValue.HasValue ?
                new ObjectParameter("KitBvValue", kitBvValue) :
                new ObjectParameter("KitBvValue", typeof(decimal));
    
            var bvValueParameter = bvValue.HasValue ?
                new ObjectParameter("BvValue", bvValue) :
                new ObjectParameter("BvValue", typeof(decimal));
    
            var rpValueParameter = rpValue.HasValue ?
                new ObjectParameter("RpValue", rpValue) :
                new ObjectParameter("RpValue", typeof(decimal));
    
            var netPayableParameter = netPayable.HasValue ?
                new ObjectParameter("NetPayable", netPayable) :
                new ObjectParameter("NetPayable", typeof(decimal));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var rndOffParameter = rndOff.HasValue ?
                new ObjectParameter("RndOff", rndOff) :
                new ObjectParameter("RndOff", typeof(decimal));
    
            var cardAmountParameter = cardAmount.HasValue ?
                new ObjectParameter("CardAmount", cardAmount) :
                new ObjectParameter("CardAmount", typeof(decimal));
    
            var payModeParameter = payMode != null ?
                new ObjectParameter("PayMode", payMode) :
                new ObjectParameter("PayMode", typeof(string));
    
            var sessIdParameter = sessId.HasValue ?
                new ObjectParameter("SessId", sessId) :
                new ObjectParameter("SessId", typeof(decimal));
    
            var bvTransferParameter = bvTransfer != null ?
                new ObjectParameter("BvTransfer", bvTransfer) :
                new ObjectParameter("BvTransfer", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var activeStatusParameter = activeStatus != null ?
                new ObjectParameter("ActiveStatus", activeStatus) :
                new ObjectParameter("ActiveStatus", typeof(string));
    
            var dispatchStatusParameter = dispatchStatus != null ?
                new ObjectParameter("DispatchStatus", dispatchStatus) :
                new ObjectParameter("DispatchStatus", typeof(string));
    
            var lRParameter = lR != null ?
                new ObjectParameter("LR", lR) :
                new ObjectParameter("LR", typeof(string));
    
            var lrDateParameter = lrDate.HasValue ?
                new ObjectParameter("LrDate", lrDate) :
                new ObjectParameter("LrDate", typeof(System.DateTime));
    
            var transporterNameParameter = transporterName != null ?
                new ObjectParameter("TransporterName", transporterName) :
                new ObjectParameter("TransporterName", typeof(string));
    
            var dispatchToParameter = dispatchTo != null ?
                new ObjectParameter("DispatchTo", dispatchTo) :
                new ObjectParameter("DispatchTo", typeof(string));
    
            var freightTypeParameter = freightType != null ?
                new ObjectParameter("FreightType", freightType) :
                new ObjectParameter("FreightType", typeof(string));
    
            var freightAmtParameter = freightAmt.HasValue ?
                new ObjectParameter("FreightAmt", freightAmt) :
                new ObjectParameter("FreightAmt", typeof(decimal));
    
            var seriesParameter = series != null ?
                new ObjectParameter("Series", series) :
                new ObjectParameter("Series", typeof(string));
    
            var scratchParameter = scratch != null ?
                new ObjectParameter("Scratch", scratch) :
                new ObjectParameter("Scratch", typeof(string));
    
            var refIdParameter = refId.HasValue ?
                new ObjectParameter("RefId", refId) :
                new ObjectParameter("RefId", typeof(decimal));
    
            var refNameParameter = refName != null ?
                new ObjectParameter("RefName", refName) :
                new ObjectParameter("RefName", typeof(string));
    
            var jTypeParameter = jType != null ?
                new ObjectParameter("JType", jType) :
                new ObjectParameter("JType", typeof(string));
    
            var unitParameter = unit.HasValue ?
                new ObjectParameter("Unit", unit) :
                new ObjectParameter("Unit", typeof(decimal));
    
            var billToParameter = billTo != null ?
                new ObjectParameter("BillTo", billTo) :
                new ObjectParameter("BillTo", typeof(string));
    
            var pSessIdParameter = pSessId.HasValue ?
                new ObjectParameter("PSessId", pSessId) :
                new ObjectParameter("PSessId", typeof(decimal));
    
            var billForParameter = billFor != null ?
                new ObjectParameter("BillFor", billFor) :
                new ObjectParameter("BillFor", typeof(string));
    
            var dcNoParameter = dcNo != null ?
                new ObjectParameter("DcNo", dcNo) :
                new ObjectParameter("DcNo", typeof(string));
    
            var importedParameter = imported != null ?
                new ObjectParameter("Imported", imported) :
                new ObjectParameter("Imported", typeof(string));
    
            var isReceiveParameter = isReceive != null ?
                new ObjectParameter("IsReceive", isReceive) :
                new ObjectParameter("IsReceive", typeof(string));
    
            var isCreditParameter = isCredit != null ?
                new ObjectParameter("IsCredit", isCredit) :
                new ObjectParameter("IsCredit", typeof(string));
    
            var billTypeParameter = billType != null ?
                new ObjectParameter("BillType", billType) :
                new ObjectParameter("BillType", typeof(string));
    
            var discountAmtParameter = discountAmt.HasValue ?
                new ObjectParameter("DiscountAmt", discountAmt) :
                new ObjectParameter("DiscountAmt", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BillMain", billNoParameter, sBillNoParameter, billDateParameter, cTypeParameter, soldByParameter, billByParameter, fTypeParameter, fCodeParameter, partyNameParameter, supplierIdParameter, chddNoParameter, chDateParameter, chAmtParameter, bankNameParameter, formNoParameter, taxAmountParameter, sTaxAmountParameter, discountParameter, kitBvValueParameter, bvValueParameter, rpValueParameter, netPayableParameter, amountParameter, rndOffParameter, cardAmountParameter, payModeParameter, sessIdParameter, bvTransferParameter, remarksParameter, activeStatusParameter, dispatchStatusParameter, lRParameter, lrDateParameter, transporterNameParameter, dispatchToParameter, freightTypeParameter, freightAmtParameter, seriesParameter, scratchParameter, refIdParameter, refNameParameter, jTypeParameter, unitParameter, billToParameter, pSessIdParameter, billForParameter, dcNoParameter, importedParameter, isReceiveParameter, isCreditParameter, billTypeParameter, discountAmtParameter);
        }
    
        public virtual int BinaryPayout(Nullable<decimal> sessID)
        {
            var sessIDParameter = sessID.HasValue ?
                new ObjectParameter("SessID", sessID) :
                new ObjectParameter("SessID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BinaryPayout", sessIDParameter);
        }
    
        public virtual int ChangeCombo(Nullable<decimal> orderNo, Nullable<decimal> newKitID)
        {
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(decimal));
    
            var newKitIDParameter = newKitID.HasValue ?
                new ObjectParameter("NewKitID", newKitID) :
                new ObjectParameter("NewKitID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangeCombo", orderNoParameter, newKitIDParameter);
        }
    
        public virtual int DailyPayout(Nullable<decimal> sessID)
        {
            var sessIDParameter = sessID.HasValue ?
                new ObjectParameter("SessID", sessID) :
                new ObjectParameter("SessID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DailyPayout", sessIDParameter);
        }
    
        public virtual int DailyPayoutCFPoint(Nullable<decimal> sessid)
        {
            var sessidParameter = sessid.HasValue ?
                new ObjectParameter("sessid", sessid) :
                new ObjectParameter("sessid", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DailyPayoutCFPoint", sessidParameter);
        }
    
        public virtual int DelID(Nullable<decimal> formNo)
        {
            var formNoParameter = formNo.HasValue ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelID", formNoParameter);
        }
    
        public virtual int DelIDByRk(Nullable<decimal> formNo)
        {
            var formNoParameter = formNo.HasValue ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelIDByRk", formNoParameter);
        }
    
        public virtual int FareInc(Nullable<decimal> sessID)
        {
            var sessIDParameter = sessID.HasValue ?
                new ObjectParameter("SessID", sessID) :
                new ObjectParameter("SessID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FareInc", sessIDParameter);
        }
    
        public virtual int Frnchise(Nullable<int> grpID, string parentID, string iD)
        {
            var grpIDParameter = grpID.HasValue ?
                new ObjectParameter("GrpID", grpID) :
                new ObjectParameter("GrpID", typeof(int));
    
            var parentIDParameter = parentID != null ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(string));
    
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Frnchise", grpIDParameter, parentIDParameter, iDParameter);
        }
    
        public virtual int FTR(Nullable<decimal> sessID)
        {
            var sessIDParameter = sessID.HasValue ?
                new ObjectParameter("SessID", sessID) :
                new ObjectParameter("SessID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FTR", sessIDParameter);
        }
    
        public virtual int Generate_EPins(Nullable<decimal> kitId, Nullable<decimal> qty, Nullable<decimal> userId)
        {
            var kitIdParameter = kitId.HasValue ?
                new ObjectParameter("KitId", kitId) :
                new ObjectParameter("KitId", typeof(decimal));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Generate_EPins", kitIdParameter, qtyParameter, userIdParameter);
        }
    
        public virtual int Generate_EPins_Web(string iDNo, Nullable<decimal> kitID, Nullable<decimal> qty)
        {
            var iDNoParameter = iDNo != null ?
                new ObjectParameter("IDNo", iDNo) :
                new ObjectParameter("IDNo", typeof(string));
    
            var kitIDParameter = kitID.HasValue ?
                new ObjectParameter("KitID", kitID) :
                new ObjectParameter("KitID", typeof(decimal));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Generate_EPins_Web", iDNoParameter, kitIDParameter, qtyParameter);
        }
    
        public virtual int Get_WalletBalance(Nullable<decimal> formNo, string acType)
        {
            var formNoParameter = formNo.HasValue ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(decimal));
    
            var acTypeParameter = acType != null ?
                new ObjectParameter("AcType", acType) :
                new ObjectParameter("AcType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Get_WalletBalance", formNoParameter, acTypeParameter);
        }
    
        public virtual ObjectResult<string> Gettime(Nullable<decimal> formNo)
        {
            var formNoParameter = formNo.HasValue ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Gettime", formNoParameter);
        }
    
        public virtual int Insert_NewMenu(string hierar, string menuName, Nullable<decimal> parentId, string formName)
        {
            var hierarParameter = hierar != null ?
                new ObjectParameter("Hierar", hierar) :
                new ObjectParameter("Hierar", typeof(string));
    
            var menuNameParameter = menuName != null ?
                new ObjectParameter("MenuName", menuName) :
                new ObjectParameter("MenuName", typeof(string));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(decimal));
    
            var formNameParameter = formName != null ?
                new ObjectParameter("FormName", formName) :
                new ObjectParameter("FormName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_NewMenu", hierarParameter, menuNameParameter, parentIdParameter, formNameParameter);
        }
    
        public virtual int InsertBFundSumm(Nullable<int> sessID)
        {
            var sessIDParameter = sessID.HasValue ?
                new ObjectParameter("SessID", sessID) :
                new ObjectParameter("SessID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertBFundSumm", sessIDParameter);
        }
    
        public virtual int LegShift(Nullable<decimal> formNo, Nullable<decimal> upLnFormNo, Nullable<decimal> legNo)
        {
            var formNoParameter = formNo.HasValue ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(decimal));
    
            var upLnFormNoParameter = upLnFormNo.HasValue ?
                new ObjectParameter("UpLnFormNo", upLnFormNo) :
                new ObjectParameter("UpLnFormNo", typeof(decimal));
    
            var legNoParameter = legNo.HasValue ?
                new ObjectParameter("LegNo", legNo) :
                new ObjectParameter("LegNo", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LegShift", formNoParameter, upLnFormNoParameter, legNoParameter);
        }
    
        public virtual int LifeTimeReward(Nullable<decimal> sessID)
        {
            var sessIDParameter = sessID.HasValue ?
                new ObjectParameter("SessID", sessID) :
                new ObjectParameter("SessID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LifeTimeReward", sessIDParameter);
        }
    
        public virtual int LifeTimeRewardNew(Nullable<decimal> sessID)
        {
            var sessIDParameter = sessID.HasValue ?
                new ObjectParameter("SessID", sessID) :
                new ObjectParameter("SessID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LifeTimeRewardNew", sessIDParameter);
        }
    
        public virtual int LifeTimeRewardTemp(Nullable<decimal> sessID)
        {
            var sessIDParameter = sessID.HasValue ?
                new ObjectParameter("SessID", sessID) :
                new ObjectParameter("SessID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LifeTimeRewardTemp", sessIDParameter);
        }
    
        public virtual int LTR(Nullable<decimal> sessId)
        {
            var sessIdParameter = sessId.HasValue ?
                new ObjectParameter("SessId", sessId) :
                new ObjectParameter("SessId", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LTR", sessIdParameter);
        }
    
        public virtual int PinTransfer(string fromIdNo, string toIdNo, Nullable<decimal> qty, Nullable<decimal> kitId)
        {
            var fromIdNoParameter = fromIdNo != null ?
                new ObjectParameter("FromIdNo", fromIdNo) :
                new ObjectParameter("FromIdNo", typeof(string));
    
            var toIdNoParameter = toIdNo != null ?
                new ObjectParameter("ToIdNo", toIdNo) :
                new ObjectParameter("ToIdNo", typeof(string));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            var kitIdParameter = kitId.HasValue ?
                new ObjectParameter("KitId", kitId) :
                new ObjectParameter("KitId", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PinTransfer", fromIdNoParameter, toIdNoParameter, qtyParameter, kitIdParameter);
        }
    
        public virtual int RankAchievers(Nullable<decimal> sessID)
        {
            var sessIDParameter = sessID.HasValue ?
                new ObjectParameter("SessID", sessID) :
                new ObjectParameter("SessID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RankAchievers", sessIDParameter);
        }
    
        public virtual int RewardInc(Nullable<decimal> sessID)
        {
            var sessIDParameter = sessID.HasValue ?
                new ObjectParameter("SessID", sessID) :
                new ObjectParameter("SessID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RewardInc", sessIDParameter);
        }
    
        public virtual int Rollback_PinTransfer(Nullable<decimal> transNo)
        {
            var transNoParameter = transNo.HasValue ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rollback_PinTransfer", transNoParameter);
        }
    
        public virtual int RollBackData(string billNo)
        {
            var billNoParameter = billNo != null ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RollBackData", billNoParameter);
        }
    
        public virtual int SBOLevel(Nullable<decimal> sessid)
        {
            var sessidParameter = sessid.HasValue ?
                new ObjectParameter("sessid", sessid) :
                new ObjectParameter("sessid", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SBOLevel", sessidParameter);
        }
    
        public virtual ObjectResult<string> Sp_Activate(string iDNo, Nullable<decimal> cardNo, Nullable<decimal> legNo)
        {
            var iDNoParameter = iDNo != null ?
                new ObjectParameter("IDNo", iDNo) :
                new ObjectParameter("IDNo", typeof(string));
    
            var cardNoParameter = cardNo.HasValue ?
                new ObjectParameter("CardNo", cardNo) :
                new ObjectParameter("CardNo", typeof(decimal));
    
            var legNoParameter = legNo.HasValue ?
                new ObjectParameter("LegNo", legNo) :
                new ObjectParameter("LegNo", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Sp_Activate", iDNoParameter, cardNoParameter, legNoParameter);
        }
    
        public virtual ObjectResult<string> Sp_CancelActivateMembers(string iDNo)
        {
            var iDNoParameter = iDNo != null ?
                new ObjectParameter("IDNo", iDNo) :
                new ObjectParameter("IDNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Sp_CancelActivateMembers", iDNoParameter);
        }
    
        public virtual int sp_executeurl(string action)
        {
            var actionParameter = action != null ?
                new ObjectParameter("action", action) :
                new ObjectParameter("action", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_executeurl", actionParameter);
        }
    
        public virtual ObjectResult<string> Sp_FundTransfer(Nullable<decimal> frmFormNo, Nullable<decimal> toFormNo, Nullable<decimal> amount, string actype)
        {
            var frmFormNoParameter = frmFormNo.HasValue ?
                new ObjectParameter("FrmFormNo", frmFormNo) :
                new ObjectParameter("FrmFormNo", typeof(decimal));
    
            var toFormNoParameter = toFormNo.HasValue ?
                new ObjectParameter("ToFormNo", toFormNo) :
                new ObjectParameter("ToFormNo", typeof(decimal));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var actypeParameter = actype != null ?
                new ObjectParameter("Actype", actype) :
                new ObjectParameter("Actype", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Sp_FundTransfer", frmFormNoParameter, toFormNoParameter, amountParameter, actypeParameter);
        }
    
        public virtual int Sp_GrowthTreeUpdate(Nullable<decimal> formNoDwn, Nullable<decimal> upLnFOrmNo, Nullable<decimal> legNo)
        {
            var formNoDwnParameter = formNoDwn.HasValue ?
                new ObjectParameter("FormNoDwn", formNoDwn) :
                new ObjectParameter("FormNoDwn", typeof(decimal));
    
            var upLnFOrmNoParameter = upLnFOrmNo.HasValue ?
                new ObjectParameter("UpLnFOrmNo", upLnFOrmNo) :
                new ObjectParameter("UpLnFOrmNo", typeof(decimal));
    
            var legNoParameter = legNo.HasValue ?
                new ObjectParameter("LegNo", legNo) :
                new ObjectParameter("LegNo", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_GrowthTreeUpdate", formNoDwnParameter, upLnFOrmNoParameter, legNoParameter);
        }
    
        public virtual int sp_Ins2MemMst(Nullable<decimal> sessId, string idNo, Nullable<decimal> cardNo, Nullable<decimal> formNo, Nullable<decimal> kitId, Nullable<decimal> upLnFormNo, Nullable<decimal> refId, Nullable<decimal> legNo, Nullable<decimal> refLegNo, Nullable<decimal> refFormNo, string memFirstName, string memLastName, string memRelation, string memFName, Nullable<System.DateTime> memDOB, string memGender, string nomineeName, string address1, string address2, string post, string tehsil, string city, string district, Nullable<decimal> stateCode, Nullable<decimal> countryId, string pinCode, string phN1, string mobl, Nullable<System.DateTime> marrgDate, string passw, Nullable<System.DateTime> doj, string relation, string panNo, Nullable<decimal> bankId, string acNo, string iFSCode, string eMail, Nullable<decimal> bV, string activeStatus, Nullable<decimal> billNo, Nullable<decimal> rP, string branchName)
        {
            var sessIdParameter = sessId.HasValue ?
                new ObjectParameter("SessId", sessId) :
                new ObjectParameter("SessId", typeof(decimal));
    
            var idNoParameter = idNo != null ?
                new ObjectParameter("IdNo", idNo) :
                new ObjectParameter("IdNo", typeof(string));
    
            var cardNoParameter = cardNo.HasValue ?
                new ObjectParameter("CardNo", cardNo) :
                new ObjectParameter("CardNo", typeof(decimal));
    
            var formNoParameter = formNo.HasValue ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(decimal));
    
            var kitIdParameter = kitId.HasValue ?
                new ObjectParameter("KitId", kitId) :
                new ObjectParameter("KitId", typeof(decimal));
    
            var upLnFormNoParameter = upLnFormNo.HasValue ?
                new ObjectParameter("UpLnFormNo", upLnFormNo) :
                new ObjectParameter("UpLnFormNo", typeof(decimal));
    
            var refIdParameter = refId.HasValue ?
                new ObjectParameter("RefId", refId) :
                new ObjectParameter("RefId", typeof(decimal));
    
            var legNoParameter = legNo.HasValue ?
                new ObjectParameter("LegNo", legNo) :
                new ObjectParameter("LegNo", typeof(decimal));
    
            var refLegNoParameter = refLegNo.HasValue ?
                new ObjectParameter("RefLegNo", refLegNo) :
                new ObjectParameter("RefLegNo", typeof(decimal));
    
            var refFormNoParameter = refFormNo.HasValue ?
                new ObjectParameter("RefFormNo", refFormNo) :
                new ObjectParameter("RefFormNo", typeof(decimal));
    
            var memFirstNameParameter = memFirstName != null ?
                new ObjectParameter("MemFirstName", memFirstName) :
                new ObjectParameter("MemFirstName", typeof(string));
    
            var memLastNameParameter = memLastName != null ?
                new ObjectParameter("MemLastName", memLastName) :
                new ObjectParameter("MemLastName", typeof(string));
    
            var memRelationParameter = memRelation != null ?
                new ObjectParameter("MemRelation", memRelation) :
                new ObjectParameter("MemRelation", typeof(string));
    
            var memFNameParameter = memFName != null ?
                new ObjectParameter("MemFName", memFName) :
                new ObjectParameter("MemFName", typeof(string));
    
            var memDOBParameter = memDOB.HasValue ?
                new ObjectParameter("MemDOB", memDOB) :
                new ObjectParameter("MemDOB", typeof(System.DateTime));
    
            var memGenderParameter = memGender != null ?
                new ObjectParameter("MemGender", memGender) :
                new ObjectParameter("MemGender", typeof(string));
    
            var nomineeNameParameter = nomineeName != null ?
                new ObjectParameter("NomineeName", nomineeName) :
                new ObjectParameter("NomineeName", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var postParameter = post != null ?
                new ObjectParameter("Post", post) :
                new ObjectParameter("Post", typeof(string));
    
            var tehsilParameter = tehsil != null ?
                new ObjectParameter("Tehsil", tehsil) :
                new ObjectParameter("Tehsil", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var districtParameter = district != null ?
                new ObjectParameter("District", district) :
                new ObjectParameter("District", typeof(string));
    
            var stateCodeParameter = stateCode.HasValue ?
                new ObjectParameter("StateCode", stateCode) :
                new ObjectParameter("StateCode", typeof(decimal));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(decimal));
    
            var pinCodeParameter = pinCode != null ?
                new ObjectParameter("PinCode", pinCode) :
                new ObjectParameter("PinCode", typeof(string));
    
            var phN1Parameter = phN1 != null ?
                new ObjectParameter("PhN1", phN1) :
                new ObjectParameter("PhN1", typeof(string));
    
            var moblParameter = mobl != null ?
                new ObjectParameter("Mobl", mobl) :
                new ObjectParameter("Mobl", typeof(string));
    
            var marrgDateParameter = marrgDate.HasValue ?
                new ObjectParameter("MarrgDate", marrgDate) :
                new ObjectParameter("MarrgDate", typeof(System.DateTime));
    
            var passwParameter = passw != null ?
                new ObjectParameter("Passw", passw) :
                new ObjectParameter("Passw", typeof(string));
    
            var dojParameter = doj.HasValue ?
                new ObjectParameter("Doj", doj) :
                new ObjectParameter("Doj", typeof(System.DateTime));
    
            var relationParameter = relation != null ?
                new ObjectParameter("Relation", relation) :
                new ObjectParameter("Relation", typeof(string));
    
            var panNoParameter = panNo != null ?
                new ObjectParameter("PanNo", panNo) :
                new ObjectParameter("PanNo", typeof(string));
    
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(decimal));
    
            var acNoParameter = acNo != null ?
                new ObjectParameter("AcNo", acNo) :
                new ObjectParameter("AcNo", typeof(string));
    
            var iFSCodeParameter = iFSCode != null ?
                new ObjectParameter("IFSCode", iFSCode) :
                new ObjectParameter("IFSCode", typeof(string));
    
            var eMailParameter = eMail != null ?
                new ObjectParameter("EMail", eMail) :
                new ObjectParameter("EMail", typeof(string));
    
            var bVParameter = bV.HasValue ?
                new ObjectParameter("BV", bV) :
                new ObjectParameter("BV", typeof(decimal));
    
            var activeStatusParameter = activeStatus != null ?
                new ObjectParameter("ActiveStatus", activeStatus) :
                new ObjectParameter("ActiveStatus", typeof(string));
    
            var billNoParameter = billNo.HasValue ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(decimal));
    
            var rPParameter = rP.HasValue ?
                new ObjectParameter("RP", rP) :
                new ObjectParameter("RP", typeof(decimal));
    
            var branchNameParameter = branchName != null ?
                new ObjectParameter("BranchName", branchName) :
                new ObjectParameter("BranchName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Ins2MemMst", sessIdParameter, idNoParameter, cardNoParameter, formNoParameter, kitIdParameter, upLnFormNoParameter, refIdParameter, legNoParameter, refLegNoParameter, refFormNoParameter, memFirstNameParameter, memLastNameParameter, memRelationParameter, memFNameParameter, memDOBParameter, memGenderParameter, nomineeNameParameter, address1Parameter, address2Parameter, postParameter, tehsilParameter, cityParameter, districtParameter, stateCodeParameter, countryIdParameter, pinCodeParameter, phN1Parameter, moblParameter, marrgDateParameter, passwParameter, dojParameter, relationParameter, panNoParameter, bankIdParameter, acNoParameter, iFSCodeParameter, eMailParameter, bVParameter, activeStatusParameter, billNoParameter, rPParameter, branchNameParameter);
        }
    
        public virtual ObjectResult<Sp_IssueEpins_Result> Sp_IssueEpins(string iDNo, Nullable<decimal> kitID, Nullable<decimal> qty, string remark, string userID)
        {
            var iDNoParameter = iDNo != null ?
                new ObjectParameter("IDNo", iDNo) :
                new ObjectParameter("IDNo", typeof(string));
    
            var kitIDParameter = kitID.HasValue ?
                new ObjectParameter("KitID", kitID) :
                new ObjectParameter("KitID", typeof(decimal));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_IssueEpins_Result>("Sp_IssueEpins", iDNoParameter, kitIDParameter, qtyParameter, remarkParameter, userIDParameter);
        }
    
        public virtual int Sp_LegShift(Nullable<decimal> formNo, Nullable<decimal> upLnFormNo, Nullable<decimal> legNo)
        {
            var formNoParameter = formNo.HasValue ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(decimal));
    
            var upLnFormNoParameter = upLnFormNo.HasValue ?
                new ObjectParameter("UpLnFormNo", upLnFormNo) :
                new ObjectParameter("UpLnFormNo", typeof(decimal));
    
            var legNoParameter = legNo.HasValue ?
                new ObjectParameter("LegNo", legNo) :
                new ObjectParameter("LegNo", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_LegShift", formNoParameter, upLnFormNoParameter, legNoParameter);
        }
    
        public virtual ObjectResult<sp_MemDtl_Result> sp_MemDtl(string strWhere)
        {
            var strWhereParameter = strWhere != null ?
                new ObjectParameter("strWhere", strWhere) :
                new ObjectParameter("strWhere", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MemDtl_Result>("sp_MemDtl", strWhereParameter);
        }
    
        public virtual int Sp_RefLegShift(Nullable<decimal> formNo, Nullable<decimal> refFormNo, Nullable<decimal> refLegNo)
        {
            var formNoParameter = formNo.HasValue ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(decimal));
    
            var refFormNoParameter = refFormNo.HasValue ?
                new ObjectParameter("RefFormNo", refFormNo) :
                new ObjectParameter("RefFormNo", typeof(decimal));
    
            var refLegNoParameter = refLegNo.HasValue ?
                new ObjectParameter("RefLegNo", refLegNo) :
                new ObjectParameter("RefLegNo", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_RefLegShift", formNoParameter, refFormNoParameter, refLegNoParameter);
        }
    
        public virtual int Sp_RefTreeUpdate(Nullable<decimal> formNoDwn, Nullable<decimal> refFormNo, Nullable<decimal> legNo)
        {
            var formNoDwnParameter = formNoDwn.HasValue ?
                new ObjectParameter("FormNoDwn", formNoDwn) :
                new ObjectParameter("FormNoDwn", typeof(decimal));
    
            var refFormNoParameter = refFormNo.HasValue ?
                new ObjectParameter("RefFormNo", refFormNo) :
                new ObjectParameter("RefFormNo", typeof(decimal));
    
            var legNoParameter = legNo.HasValue ?
                new ObjectParameter("LegNo", legNo) :
                new ObjectParameter("LegNo", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_RefTreeUpdate", formNoDwnParameter, refFormNoParameter, legNoParameter);
        }
    
        public virtual int sp_RollBackTopUp(Nullable<decimal> idNo)
        {
            var idNoParameter = idNo.HasValue ?
                new ObjectParameter("IdNo", idNo) :
                new ObjectParameter("IdNo", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RollBackTopUp", idNoParameter);
        }
    
        public virtual ObjectResult<sp_ShowDownLine_Result> sp_ShowDownLine(Nullable<decimal> formNo, string leg, string frmDt, string toDt)
        {
            var formNoParameter = formNo.HasValue ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(decimal));
    
            var legParameter = leg != null ?
                new ObjectParameter("Leg", leg) :
                new ObjectParameter("Leg", typeof(string));
    
            var frmDtParameter = frmDt != null ?
                new ObjectParameter("FrmDt", frmDt) :
                new ObjectParameter("FrmDt", typeof(string));
    
            var toDtParameter = toDt != null ?
                new ObjectParameter("ToDt", toDt) :
                new ObjectParameter("ToDt", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ShowDownLine_Result>("sp_ShowDownLine", formNoParameter, legParameter, frmDtParameter, toDtParameter);
        }
    
        public virtual ObjectResult<sp_ShowRefTree_Result> sp_ShowRefTree(Nullable<decimal> formNo, Nullable<decimal> mLvl)
        {
            var formNoParameter = formNo.HasValue ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(decimal));
    
            var mLvlParameter = mLvl.HasValue ?
                new ObjectParameter("mLvl", mLvl) :
                new ObjectParameter("mLvl", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ShowRefTree_Result>("sp_ShowRefTree", formNoParameter, mLvlParameter);
        }
    
        public virtual ObjectResult<sp_ShowTree_Result> sp_ShowTree(Nullable<decimal> formNo, Nullable<decimal> mLvl)
        {
            var formNoParameter = formNo.HasValue ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(decimal));
    
            var mLvlParameter = mLvl.HasValue ?
                new ObjectParameter("mLvl", mLvl) :
                new ObjectParameter("mLvl", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ShowTree_Result>("sp_ShowTree", formNoParameter, mLvlParameter);
        }
    
        public virtual int sp_TopupEpin(Nullable<decimal> formNo, Nullable<decimal> kitID, Nullable<decimal> qty)
        {
            var formNoParameter = formNo.HasValue ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(decimal));
    
            var kitIDParameter = kitID.HasValue ?
                new ObjectParameter("KitID", kitID) :
                new ObjectParameter("KitID", typeof(decimal));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_TopupEpin", formNoParameter, kitIDParameter, qtyParameter);
        }
    
        public virtual int sp_TreeUpdate(Nullable<decimal> formNoDwn, Nullable<decimal> upLnFOrmNo, Nullable<decimal> legNo)
        {
            var formNoDwnParameter = formNoDwn.HasValue ?
                new ObjectParameter("FormNoDwn", formNoDwn) :
                new ObjectParameter("FormNoDwn", typeof(decimal));
    
            var upLnFOrmNoParameter = upLnFOrmNo.HasValue ?
                new ObjectParameter("UpLnFOrmNo", upLnFOrmNo) :
                new ObjectParameter("UpLnFOrmNo", typeof(decimal));
    
            var legNoParameter = legNo.HasValue ?
                new ObjectParameter("LegNo", legNo) :
                new ObjectParameter("LegNo", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_TreeUpdate", formNoDwnParameter, upLnFOrmNoParameter, legNoParameter);
        }
    
        public virtual int TopUpCancel(string iDNo, string reason)
        {
            var iDNoParameter = iDNo != null ?
                new ObjectParameter("IDNo", iDNo) :
                new ObjectParameter("IDNo", typeof(string));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TopUpCancel", iDNoParameter, reasonParameter);
        }
    
        public virtual int WeeklyPayoutCFPoint(Nullable<decimal> sessid)
        {
            var sessidParameter = sessid.HasValue ?
                new ObjectParameter("sessid", sessid) :
                new ObjectParameter("sessid", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WeeklyPayoutCFPoint", sessidParameter);
        }
    }
}
